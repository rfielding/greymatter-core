agents:
  container_image: ubuntu-2004-ci

steps:
  # this is in place of automated smoke test
  - block: "I have run a smoke test using the inputs-output.cue artifact from merge to main build (under promote artifacts to staging)"

  - input: "Information please"
    key: info-request
    fields:
      - text: "What is this Release Called"
        key: "release"

  ##############################################
  # Create and validate release greymatter download script
  ##############################################
  - label: "Generate download script"
    key: "generate-download-script-tag"
    commands:
      - ./scripts/promotion.py generate download-script --git-tag=$${BUILDKITE_TAG:1}
    artifact_paths:
      - greymatter-download.sh
    agents:
      container_image: ubuntu-2204-ci
      queue: default

  - label: "validate and publish greymatter download script"
    key: validate-download-script
    depends_on:
      - generate-download-script-tag
    env:
      JF_DEST_REGISTRY: generic
    commands:
      - set -x
      - buildkite-agent artifact download greymatter-download.sh . --step generate-download-script-tag
      - ./scripts/validate-download-script
      - jf rt upload ./greymatter-download.sh $$JF_DEST_REGISTRY/greymatter-download_$(buildkite-agent meta-data get release).sh
      - set +x
    soft_fail: true

  ##############################################
  # Create and validate release inputs.cue 
  ##############################################
  
  - label: "Update inputs.cue on tag"
    key: "update-inputs-cue-tag"
    env:
      GENERIC_DEST: "generic"
      OCI_DEST: "oci"
    command: ./scripts/promotion.py generate inputs
    agents:
      container_image: ubuntu-2204-ci
      queue: default
    artifact_paths: 
      generated_inputs.cue

  - label: validate generated inputs-cue
    key: validate-generated-inputs-cue
    depends_on:
      - update-inputs-cue-tag
    env:
      - DEST_OCI_CI: "oci"
    commands:
      - buildkite-agent artifact download generated_inputs.cue . --step update-inputs-cue-tag
      - mv generated_inputs.cue inputs.cue
      - ./scripts/validate-generated-inputs-cue
    soft_fail: true


  ##############################################
  # Validate generated manifests
  ##############################################

  - label: "Update generated manifests"
    key: update-generated-manifests
    depends_on:
      - generate-manifests
    commands: 
      - buildkite-agent artifact download generated-manifests/* . --build ${BUILDKITE_BUILD_ID} --step generate-manifests
      - find ./generated-manifests -type f -name 'operator*.yaml' -exec sed -i 's|greymatter.jfrog.io/dev-oci/|greymatter.jfrog.io/oci/|g' {} \;
    artifact_paths:
      - generated-manifests/*

  - label: validate generated manifests use correct operator image
    key:
    depends_on:
      - update-generated-manifests
    env:
      - DEST_OCI_CI: "oci"
    commands:
      - buildkite-agent artifact download generated-manifests/* . --build ${BUILDKITE_BUILD_ID} --step update-generated-manifests
      - ./scripts/validate-generated-manifests
    soft_fail: true


  ##############################################
  # Promote Component artifacts from staging to release repos
  ##############################################
  - label: "Promote Component Artifacts To Release"
    key: "promote-component-artifacts-to-release"
    depends_on:
      - promote-artifacts-to-staging
    env:
      GENERIC_SRC: "ci-staging-generic"
      GENERIC_DEST: "generic"
      OCI_SRC: "ci-staging-oci"
      OCI_DEST: "oci"
    commands:
      - ./scripts/promotion.py promote --dry-run=false proxy
      - ./scripts/promotion.py promote --dry-run=false catalog
      - ./scripts/promotion.py promote --dry-run=false dashboard
      - ./scripts/promotion.py promote --dry-run=false control
      - ./scripts/promotion.py promote --dry-run=false control-api
      - ./scripts/promotion.py promote --dry-run=false cli
      - ./scripts/promotion.py promote --dry-run=false audits
    agents:
      container_image: ubuntu-2204-ci
      queue: default

  ##############################################
  # Package and push core tarball to release
  ##############################################
  - label: "Package Tarball tag"
    key: "package-tarball-tag"
    depends_on:
      - test
      - validate-generated-inputs-cue
      - validate-download-script
      - update-generated-manifests
      - update-inputs-cue-tag
      - generate-download-script-tag
    env:
      JF_DEST_REGISTRY: generic
    commands:
      - buildkite-agent artifact download generated_inputs.cue . --step update-inputs-cue-tag
      - mv generated_inputs.cue inputs.cue
      - buildkite-agent artifact download generated-manifests/* . --build ${BUILDKITE_BUILD_ID} --step update-generated-manifests
      - sleep 10
      - rm -rf /tmp/greymatter-core && mkdir /tmp/greymatter-core
      - tar --exclude-vcs --exclude=".buildkite" --exclude="CHANGELOG.md" --exclude="scripts/cibuild" --exclude="scripts/bootstrap" --exclude="scripts/update" --exclude="scripts/promotion" --exclude="scripts/promotion.py" --exclude="scripts/templates/greymatter-download-template" --exclude="greymatter-download-template.sh" -czf /tmp/greymatter-core/greymatter-core.tar.gz .
      - cp /tmp/greymatter-core/greymatter-core.tar.gz . && rm -r /tmp/greymatter-core
      - jf rt upload ./greymatter-core.tar.gz $$JF_DEST_REGISTRY/greymatter-core/greymatter-core_${BUILDKITE_TAG:1}_none_none.tar.gz
    artifact_paths:
      - greymatter-core.tar.gz
