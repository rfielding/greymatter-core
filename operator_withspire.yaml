metadata:
  labels:
    name: greymatter-operator
  name: greymatter-operator
  namespace: gm-operator
spec:
  serviceName: greymatter-operator
  replicas: 1
  selector:
    matchLabels:
      name: greymatter-operator
  template:
    metadata:
      labels:
        name: greymatter-operator
    spec:
      securityContext:
        runAsNonRoot: true
        fsGroup: 1000
      containers:
        - env:
            - name: BUGSNAG_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: bugsnag-api-token
                  key: token
                  optional: true
          image: greymatter.jfrog.io/oci/greymatter-operator:0.13.0-ubi8.6-2022-11-09
          name: operator
          command:
            - /app/operator
          args:
            - -repo
            - git@github.com:<your-org>/greymatter-core.git
            - -sshPrivateKeyPath
            - /app/.ssh/ssh-private-key
            - -branch
            - main
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 120
            periodSeconds: 10
          resources:
            limits:
              cpu: 200m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 150Mi
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: webhook-cert
              readOnly: true
            - name: overrides-cue
              mountPath: /app/core/overrides.cue
              subPath: overrides.cue
            - name: greymatter-sync-secret
              readOnly: true
              mountPath: /app/.ssh
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 120
            periodSeconds: 20
          imagePullPolicy: Always
      imagePullSecrets: []
      serviceAccountName: greymatter-operator
      terminationGracePeriodSeconds: 10
      volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
            secretName: gm-webhook-cert
        - name: overrides-cue
          configMap:
            name: overrides-cue
        - name: greymatter-sync-secret
          secret:
            defaultMode: 256
            secretName: greymatter-sync-secret
kind: StatefulSet
apiVersion: apps/v1
---
metadata:
  name: overrides-cue
  namespace: gm-operator
data:
  overrides.cue: |-
    package greymatter

    config: {
      spire: true
      openshift: false
      enable_historical_metrics: true
      auto_copy_image_pull_secret: true
    }
kind: ConfigMap
apiVersion: v1
---
metadata:
  name: greymatter-operator
  namespace: gm-operator
imagePullSecrets:
  - name: gm-docker-secret
  - name: quay-secret
kind: ServiceAccount
apiVersion: v1
---
metadata:
  name: gm-leader-election-role
  namespace: gm-operator
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: gm-operator-gm-operator-role
rules:
  - apiGroups:
      - apps
    resources:
      - deployments
      - statefulsets
    verbs:
      - watch
      - get
      - list
      - create
      - update
  - apiGroups:
      - apps
    resources:
      - deployments/finalizers
      - statefulsets/finalizers
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
      - secrets
      - serviceaccounts
      - services
    verbs:
      - get
      - create
      - update
      - patch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterrolebindings
      - clusterroles
    verbs:
      - get
      - create
      - update
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - create
      - update
  - apiGroups:
      - config.openshift.io
    resources:
      - ingresses
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - create
  - apiGroups:
      - apps
    resources:
      - daemonsets
    verbs:
      - get
      - create
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
    verbs:
      - get
      - create
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - list
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - get
      - create
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - pods
    verbs:
      - get
      - list
      - watch
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: gm-webhook-cert
  namespace: gm-operator
data:
  tls.crt: !!binary
  tls.key: !!binary
kind: Secret
apiVersion: v1
---
metadata:
  name: gm-leader-election-rolebinding
  namespace: gm-operator
subjects:
  - kind: ServiceAccount
    name: greymatter-operator
    namespace: gm-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gm-leader-election-role
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: gm-operator-gm-operator-rolebinding
subjects:
  - kind: ServiceAccount
    name: greymatter-operator
    namespace: gm-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gm-operator-gm-operator-role
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: spire
  labels:
    name: spire
kind: Namespace
apiVersion: v1
---
metadata:
  name: server
  namespace: spire
spec:
  type: NodePort
  selector:
    app: server
  ports:
    - name: server
      protocol: TCP
      port: 8443
      targetPort: 8443
kind: Service
apiVersion: v1
---
metadata:
  name: server
  namespace: spire
  labels:
    app: server
spec:
  selector:
    matchLabels:
      app: server
  serviceName: server
  template:
    metadata:
      name: server
      namespace: spire
      labels:
        app: server
    spec:
      containers:
        - name: server
          image: gcr.io/spiffe-io/spire-server:1.2.0
          imagePullPolicy: IfNotPresent
          args:
            - -config
            - /run/spire/config/server.conf
          ports:
            - containerPort: 8443
              name: server
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /opt/spire/bin/spire-server
                - healthcheck
                - -socketPath=/run/spire/socket/registration.sock
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          volumeMounts:
            - name: server-socket
              mountPath: /run/spire/socket
            - name: server-config
              mountPath: /run/spire/config
              readOnly: true
            - name: server-ca
              mountPath: /run/spire/ca
              readOnly: true
            - name: server-data
              mountPath: /run/spire/data
          resources:
            limits:
              cpu: 350m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
        - name: registrar
          image: gcr.io/spiffe-io/k8s-workload-registrar:1.2.0
          imagePullPolicy: IfNotPresent
          args:
            - -config
            - /run/spire/config/registrar.conf
          ports:
            - containerPort: 8444
              name: registrar
              protocol: TCP
          volumeMounts:
            - name: server-config
              mountPath: /run/spire/config
              readOnly: true
            - name: server-socket
              mountPath: /run/spire/socket
          resources:
            limits:
              cpu: 400m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
      volumes:
        - name: server-socket
          emptyDir:
            medium: Memory
        - name: server-config
          configMap:
            name: server-config
            defaultMode: 420
        - name: server-ca
          secret:
            secretName: server-ca
            defaultMode: 420
      serviceAccountName: server
      shareProcessNamespace: true
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: server-data
        namespace: spire
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        volumeMode: Filesystem
kind: StatefulSet
apiVersion: apps/v1
---
metadata:
  name: server
  namespace: spire
kind: ServiceAccount
apiVersion: v1
---
metadata:
  name: server
  namespace: spire
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - list
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: spire-server
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - get
      - create
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: server
  namespace: spire
subjects:
  - kind: ServiceAccount
    name: server
    namespace: spire
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: server
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: spire-server
subjects:
  - kind: ServiceAccount
    name: server
    namespace: spire
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-server
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: server-config
  namespace: spire
data:
  registrar.conf: |-
    trust_domain = "greymatter.io"
    server_socket_path = "/run/spire/socket/registration.sock"
    cluster = "meshes"
    mode = "reconcile"
    pod_label = "greymatter.io/workload"
    metrics_addr = "0"
    controller_name = "k8s-workload-registrar"
    log_level = "debug"
    log_path = "/dev/stdout"
  server.conf: |-
    server {
      bind_address = "0.0.0.0"
      bind_port = "8443"
      ca_subject = {
        country = ["US"],
        organization = ["Grey Matter"],
        common_name = "Mesh",
      }
      data_dir = "/run/spire/data"
      default_svid_ttl = "1h"
      log_file = "/dev/stdout"
      log_level = "DEBUG"
      trust_domain = "greymatter.io"
      socket_path = "/run/spire/socket/registration.sock"
    }
    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }
      NodeAttestor "k8s_psat" {
        plugin_data {
          clusters = {
            "meshes" = {
              service_account_allow_list = ["spire:agent"]
              audience = ["server"]
            }
          }
        }
      }
      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }
      Notifier "k8sbundle" {
        plugin_data {
          namespace = "spire"
          config_map = "server-bundle"
        }
      }
      UpstreamAuthority "disk" {
        plugin_data {
          cert_file_path = "/run/spire/ca/intermediate.crt"
          key_file_path = "/run/spire/ca/intermediate.key"
          bundle_file_path = "/run/spire/ca/root.crt"
        }
      }
    }
kind: ConfigMap
apiVersion: v1
---
metadata:
  name: server-bundle
  namespace: spire
data:
  bundle.crt: ""
kind: ConfigMap
apiVersion: v1
---
metadata:
  name: agent
  namespace: spire
  labels:
    app: agent
spec:
  selector:
    matchLabels:
      app: agent
  template:
    metadata:
      namespace: spire
      labels:
        app: agent
    spec:
      initContainers:
        - name: init-server
          image: gcr.io/spiffe-io/wait-for-it
          imagePullPolicy: IfNotPresent
          args:
            - -t
            - "30"
            - server:8443
          resources: {}
      containers:
        - name: agent
          image: gcr.io/spiffe-io/spire-agent:1.2.0
          imagePullPolicy: IfNotPresent
          args:
            - -config
            - /run/spire/config/agent.conf
          livenessProbe:
            exec:
              command:
                - /opt/spire/bin/spire-agent
                - healthcheck
                - -socketPath
                - /run/spire/socket/agent.sock
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          volumeMounts:
            - name: agent-config
              mountPath: /run/spire/config
              readOnly: true
            - name: agent-socket
              mountPath: /run/spire/socket
            - name: server-bundle
              mountPath: /run/spire/bundle
              readOnly: true
            - name: agent-token
              mountPath: /run/spire/token
          resources:
            limits:
              cpu: 400m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: agent-config
          configMap:
            defaultMode: 420
            name: agent-config
        - name: agent-socket
          hostPath:
            path: /run/spire/socket
            type: DirectoryOrCreate
        - name: server-bundle
          configMap:
            defaultMode: 420
            name: server-bundle
        - name: agent-token
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  audience: server
                  expirationSeconds: 7200
                  path: agent
      serviceAccountName: agent
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      hostPID: true
kind: DaemonSet
apiVersion: apps/v1
---
metadata:
  name: agent
  namespace: spire
kind: ServiceAccount
apiVersion: v1
---
metadata:
  name: spire-agent
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - nodes/proxy
    verbs:
      - get
      - list
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: spire-agent
subjects:
  - kind: ServiceAccount
    name: agent
    namespace: spire
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-agent
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: agent-config
  namespace: spire
data:
  agent.conf: |-
    agent {
      data_dir = "/run/spire"
      log_level = "INFO"
      server_address = "server"
      server_port = "8443"
      socket_path = "/run/spire/socket/agent.sock"
      trust_bundle_path = "/run/spire/bundle/bundle.crt"
      trust_domain = "greymatter.io"
    }
    plugins {
      NodeAttestor "k8s_psat" {
        plugin_data {
          cluster = "meshes"
          token_path = "/run/spire/token/agent"
        }
      }
      KeyManager "memory" {
        plugin_data {
        }
      }
      WorkloadAttestor "k8s" {
        plugin_data {
          skip_kubelet_verification = true
        }
      }
    }
kind: ConfigMap
apiVersion: v1
---
metadata:
  labels:
    name: greymatter
  name: greymatter
kind: Namespace
apiVersion: v1
---
metadata:
  name: greymatter-audit-agent
  namespace: greymatter
  labels:
    app.kubernetes.io/instance: greymatter-audit-agent
    app.kubernetes.io/name: greymatter-audit-agent
    app.kubernetes.io/part-of: greymatter-audit-agent
    app.kubernetes.io/version: 0.22.0
automountServiceAccountToken: true
kind: ServiceAccount
apiVersion: v1
---
metadata:
  name: gm-operator-greymatter-audit-agent
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - namespaces
    verbs:
      - list
      - watch
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
---
metadata:
  name: gm-operator-greymatter-audit-agent-clusterrolebinding
  namespace: greymatter
subjects:
  - kind: ServiceAccount
    name: greymatter-audit-agent
    namespace: greymatter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gm-operator-greymatter-audit-agent
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1

